{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/msokol/Projects/quizmaker/web/src/components/quizzes/quizzesContainer.js\";\nimport React, { Component, useState, useEffect } from 'react';\nimport { apiHost } from 'config';\nimport axios from 'axios';\nimport Quizzes from './quizzes';\nimport { isCompositeComponent } from 'react-dom/test-utils';\n\nclass QuizzesContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      quizzes: [],\n      pageNumber: 0,\n      hasMore: false,\n      loading: true\n    };\n\n    this.fetchQuizzesPaginated = async () => {\n      this.setState({\n        loading: true\n      });\n      const requests = [],\n            {\n        pageNumber\n      } = this.state,\n            size = 20;\n\n      for (let i = 0; i <= this.state.pageNumber; i++) requests.push(axios.get(`${apiHost}/api/quizzes`, {\n        params: {\n          page: pageNumber,\n          size: size\n        }\n      }));\n\n      const responses = await Promise.all(requests);\n      let data = [];\n      responses.forEach(response => data = [...data, ...response.data]);\n      const lastResponseLength = responses[responses.length - 1].data.length;\n      this.setState({\n        hasMore: lastResponseLength === size\n      });\n      console.log(data);\n      this.setState({\n        loading: false,\n        quizzes: data\n      });\n    };\n\n    this.filterByTopic = topic => {\n      if (topic === \"\") this.reset();else this.fetchQuizzesByTopic({\n        topic\n      });\n    };\n  }\n\n  fetchQuizzesByTopic(topic) {\n    axios.get(`${apiHost}/api/quizzes`, {\n      params: {\n        topic: topic.topic\n      }\n    }).then(response => {\n      this.setState({\n        quizzes: response.data,\n        pageNumber: 0\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.fetchQuizzesPaginated();\n  }\n\n  reset() {\n    this.setState({\n      quizzes: [],\n      pageNumber: 0,\n      hasMore: false,\n      loading: true\n    }, this.fetchQuizzesPaginated);\n  }\n\n  render() {\n    const {\n      quizzes,\n      hasMore,\n      loading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"portal\",\n      children: /*#__PURE__*/_jsxDEV(Quizzes, {\n        quizzes: quizzes,\n        filterByTopic: this.filterByTopic,\n        hasMore: hasMore,\n        loading: loading,\n        incrementPageNumber: () => this.setState(prevState => {\n          return { ...prevState,\n            pageNumber: prevState.pageNumber + 1\n          };\n        }, this.fetchQuizzesPaginated)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default QuizzesContainer;","map":{"version":3,"sources":["/home/msokol/Projects/quizmaker/web/src/components/quizzes/quizzesContainer.js"],"names":["React","Component","useState","useEffect","apiHost","axios","Quizzes","isCompositeComponent","QuizzesContainer","state","quizzes","pageNumber","hasMore","loading","fetchQuizzesPaginated","setState","requests","size","i","push","get","params","page","responses","Promise","all","data","forEach","response","lastResponseLength","length","console","log","filterByTopic","topic","reset","fetchQuizzesByTopic","then","componentDidMount","render","prevState"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport { apiHost } from 'config';\nimport axios from 'axios';\nimport Quizzes from './quizzes';\nimport { isCompositeComponent } from 'react-dom/test-utils';\n\nclass QuizzesContainer extends Component {\n\n    state = {\n        quizzes: [],\n        pageNumber: 0,\n        hasMore: false,\n        loading: true\n    };\n\n    fetchQuizzesPaginated = async () => {\n        this.setState({loading: true});\n        const requests = [], { pageNumber } = this.state, size = 20;\n        \n        for (let i = 0; i <= this.state.pageNumber; i++) \n            requests.push(axios.get(`${apiHost}/api/quizzes`, {\n                params: {\n                    page: pageNumber,\n                    size: size\n                }\n            }))\n        \n        const responses = await Promise.all(requests);\n        let data = [];\n        responses.forEach(response => data = [...data, ...response.data])\n\n        const lastResponseLength = responses[responses.length-1].data.length;\n        this.setState({hasMore: lastResponseLength === size});\n        \n        console.log(data)\n\n        this.setState({loading: false, quizzes: data})\n    }\n\n    fetchQuizzesByTopic(topic) {\n        axios.get(`${apiHost}/api/quizzes`, {\n            params: { topic: topic.topic }\n        }).then(response => {\n            this.setState({\n                quizzes: response.data,\n                pageNumber: 0\n            })\n        })\n    }\n\n    componentDidMount() {\n        this.fetchQuizzesPaginated();\n    }\n\n    reset() {\n        this.setState({\n            quizzes: [],\n            pageNumber: 0,\n            hasMore: false,\n            loading: true\n        }, this.fetchQuizzesPaginated)\n    }\n\n    filterByTopic = topic => {\n\n        \n\n        if(topic === \"\")\n            this.reset();\n        else\n            this.fetchQuizzesByTopic({topic})\n    }\n\n    render() {\n\n        const { quizzes, hasMore, loading } = this.state;\n\n        return(\n            <div className=\"portal\">\n                <Quizzes \n                    quizzes={quizzes} \n                    filterByTopic={this.filterByTopic}\n                    hasMore={hasMore} \n                    loading={loading}\n\n                    incrementPageNumber={() => this.setState(prevState => {\n                        return {\n                            ...prevState,   \n                            pageNumber: prevState.pageNumber + 1\n                        }\n                    }, this.fetchQuizzesPaginated)}\n                 />\n            </div>\n        )\n    }\n\n\n}\n \nexport default QuizzesContainer;"]},"metadata":{},"sourceType":"module"}