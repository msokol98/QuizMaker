{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/mitchell/Projects/quizmaker/web/src/components/auth/register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport FormTemplate from './form';\nimport { apiHost } from 'config';\nimport axios from 'axios';\n\nconst RegistrationForm = () => {\n  _s();\n\n  const [error, setError] = useState(false);\n\n  const register = userDetails => {\n    axios.post(`${apiHost}/register`, userDetails).then(() => {\n      window.location = '/login';\n    }).catch(() => setError(true));\n  };\n\n  const isValid = fields => fields['password'].value === fields['passwordConfirmation'].value;\n\n  const fields = {\n    firstName: {\n      displayName: \"First Name\",\n      type: \"text\",\n      value: \"\"\n    },\n    lastName: {\n      displayName: \"Last Name\",\n      type: \"text\",\n      value: \"\"\n    },\n    email: {\n      displayName: \"Email\",\n      type: \"email\",\n      value: \"\"\n    },\n    password: {\n      displayName: \"Password\",\n      type: \"password\",\n      value: \"\"\n    },\n    passwordConfirmation: {\n      displayName: \"Confirm Password\",\n      type: \"password\",\n      value: \"\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(FormTemplate, {\n    fields: fields,\n    submit: register,\n    validate: isValid,\n    validationErrorMessage: \"The given passwords do not match\",\n    error: error,\n    serverErrorMessage: \"User with given email already exists\",\n    header: \"Sign Up\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RegistrationForm, \"AvrsuJm02Cqlq6/LWpvA21zDecQ=\");\n\n_c = RegistrationForm;\nexport default RegistrationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegistrationForm\");","map":{"version":3,"sources":["/home/mitchell/Projects/quizmaker/web/src/components/auth/register.js"],"names":["React","useState","FormTemplate","apiHost","axios","RegistrationForm","error","setError","register","userDetails","post","then","window","location","catch","isValid","fields","value","firstName","displayName","type","lastName","email","password","passwordConfirmation"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,QAAzB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAE3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMO,QAAQ,GAAGC,WAAW,IAAI;AAC5BL,IAAAA,KAAK,CAACM,IAAN,CAAY,GAAEP,OAAQ,WAAtB,EAAkCM,WAAlC,EAA+CE,IAA/C,CAAoD,MAAM;AACtDC,MAAAA,MAAM,CAACC,QAAP,GAAkB,QAAlB;AACH,KAFD,EAEGC,KAFH,CAES,MAAMP,QAAQ,CAAC,IAAD,CAFvB;AAGH,GAJD;;AAMA,QAAMQ,OAAO,GAAGC,MAAM,IAAIA,MAAM,CAAC,UAAD,CAAN,CAAmBC,KAAnB,KAA6BD,MAAM,CAAC,sBAAD,CAAN,CAA+BC,KAAtF;;AAEA,QAAMD,MAAM,GAAI;AACZE,IAAAA,SAAS,EAAE;AAAEC,MAAAA,WAAW,EAAE,YAAf;AAA6BC,MAAAA,IAAI,EAAE,MAAnC;AAA2CH,MAAAA,KAAK,EAAE;AAAlD,KADC;AAEZI,IAAAA,QAAQ,EAAE;AAAEF,MAAAA,WAAW,EAAE,WAAf;AAA4BC,MAAAA,IAAI,EAAE,MAAlC;AAA0CH,MAAAA,KAAK,EAAE;AAAjD,KAFE;AAGZK,IAAAA,KAAK,EAAE;AAAEH,MAAAA,WAAW,EAAE,OAAf;AAAwBC,MAAAA,IAAI,EAAE,OAA9B;AAAuCH,MAAAA,KAAK,EAAE;AAA9C,KAHK;AAIZM,IAAAA,QAAQ,EAAE;AAAEJ,MAAAA,WAAW,EAAE,UAAf;AAA2BC,MAAAA,IAAI,EAAE,UAAjC;AAA6CH,MAAAA,KAAK,EAAE;AAApD,KAJE;AAKZO,IAAAA,oBAAoB,EAAE;AAAEL,MAAAA,WAAW,EAAE,kBAAf;AAAmCC,MAAAA,IAAI,EAAE,UAAzC;AAAqDH,MAAAA,KAAK,EAAE;AAA5D;AALV,GAAhB;AAQA,sBACI,QAAC,YAAD;AACI,IAAA,MAAM,EAAED,MADZ;AAEI,IAAA,MAAM,EAAER,QAFZ;AAGI,IAAA,QAAQ,EAAEO,OAHd;AAII,IAAA,sBAAsB,EAAC,kCAJ3B;AAKI,IAAA,KAAK,EAAET,KALX;AAMI,IAAA,kBAAkB,EAAC,sCANvB;AAOI,IAAA,MAAM,EAAC;AAPX;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAhCD;;GAAMD,gB;;KAAAA,gB;AAkCN,eAAeA,gBAAf","sourcesContent":["import React, { useState } from 'react';\nimport FormTemplate from './form';\nimport { apiHost } from 'config';\nimport axios from 'axios';\n\nconst RegistrationForm = () => {\n\n    const [error, setError] = useState(false);\n\n    const register = userDetails => {\n        axios.post(`${apiHost}/register`, userDetails).then(() => {\n            window.location = '/login'\n        }).catch(() => setError(true))\n    };\n\n    const isValid = fields => fields['password'].value === fields['passwordConfirmation'].value;\n\n    const fields =  {\n        firstName: { displayName: \"First Name\", type: \"text\", value: \"\" },\n        lastName: { displayName: \"Last Name\", type: \"text\", value: \"\" },\n        email: { displayName: \"Email\", type: \"email\", value: \"\" },\n        password: { displayName: \"Password\", type: \"password\", value: \"\" },\n        passwordConfirmation: { displayName: \"Confirm Password\", type: \"password\", value: \"\" }\n    };\n\n    return (\n        <FormTemplate \n            fields={fields} \n            submit={register}  \n            validate={isValid}\n            validationErrorMessage=\"The given passwords do not match\"\n            error={error}\n            serverErrorMessage=\"User with given email already exists\"\n            header=\"Sign Up\"\n        />\n    )\n\n};\n\nexport default RegistrationForm;"]},"metadata":{},"sourceType":"module"}